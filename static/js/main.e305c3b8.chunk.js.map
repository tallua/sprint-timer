{"version":3,"sources":["components/timers/circle-timer.tsx","hooks/useTimer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["unit","range","begin","end","interval","result","current","push","convertRemainTime","ms","milisec","Math","round","sec","floor","min","sec_str","slice","min_str","Circle","props","percentage","cx","cy","r","fill","strokeWidth","strokeDasharray","CircleTime","map","num","line","rotate","center","r1","r2","rad","PI","cos","sin","getLine","key","x1","y1","x2","y2","CircleTimer","useState","supportNoti","setSupportNoti","totalTime","timerTime","setTimerTime","timerTimeTemp","setTimerTimeTemp","callback","tick","endTime","checkpoints","settings","setSettings","Date","now","currentTime","setCurrentTime","nextCheckpointIndex","setNextCheckpointIndex","useEffect","timer","setInterval","nextTime","clearInterval","length","startTimer","newStartTime","sort","a","b","v","useStopwatch","Notification","remainTime","console","log","startStopwatch","window","requestPermission","permission","className","viewBox","InputGroup","Prepend","Text","id","FormControl","placeholder","defaultValue","onChange","value","match","parseInt","split","nextTimer","parseTimerTimeTempString","target","Button","variant","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e305c3b8.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { useStopwatch } from '../../hooks/useTimer';\r\nimport './circle-timer.css'\r\n\r\nconst unit = 15.9155;\r\n\r\nfunction range(begin: number, end: number, interval: number) {\r\n  let result: number[] = [];\r\n\r\n  let current = begin;\r\n  while (current <= end) {\r\n    result.push(current);\r\n    current += interval;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction convertRemainTime(ms: number) {\r\n  if(ms < 0)\r\n    ms = 0;\r\n  const milisec = Math.round(ms / 1000) * 1000;\r\n  const sec = Math.floor((milisec / 1000) % 60);\r\n  const min = Math.floor((milisec / 60000) % 60);\r\n\r\n  const sec_str = (\"0\" + sec).slice(-2);\r\n  const min_str = (\"0\" + min).slice(-2);\r\n\r\n  return `${min_str}:${sec_str}`\r\n}\r\n\r\nconst Circle: FunctionComponent<{\r\n  percentage: number\r\n}> = (props) => {\r\n  const percentage = props.percentage;\r\n  return (\r\n    <g>\r\n      <circle\r\n        cx={2 * unit}\r\n        cy={2 * unit}\r\n        r={unit}\r\n        fill={'none'}\r\n        strokeWidth={2 * unit}\r\n        strokeDasharray={`${percentage} 100`}\r\n      />\r\n    </g>\r\n  )\r\n}\r\n\r\nconst CircleTime: FunctionComponent = (props) => {\r\n  const getLine = (rotate: number): [number, number][] => {\r\n    const center = unit * 2;\r\n    const r1 = unit * 1.4;\r\n    const r2 = unit * 1.90;\r\n    const rad = rotate / 180 * Math.PI;\r\n\r\n    return [\r\n      [center + r1 * Math.cos(rad), center + r1 * Math.sin(rad)],\r\n      [center + r2 * Math.cos(rad), center + r2 * Math.sin(rad)]\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <g>\r\n      {\r\n        range(0, 11, 1).map((num) => {\r\n          const line = getLine(num * 30);\r\n\r\n          if (num % 3 === 0) {\r\n            return <line key={num}\r\n              x1={line[0][0]} y1={line[0][1]}\r\n              x2={line[1][0]} y2={line[1][1]}\r\n              strokeWidth={2} />\r\n          } else {\r\n            return <line key={num}\r\n              x1={line[0][0]} y1={line[0][1]}\r\n              x2={line[1][0]} y2={line[1][1]}\r\n              strokeWidth={1} />\r\n          }\r\n        })\r\n      }\r\n    </g>\r\n  )\r\n}\r\n\r\nexport const CircleTimer: FunctionComponent<{\r\n  totalTime?: number\r\n}> = (props) => {\r\n  const [supportNoti, setSupportNoti] = useState<boolean>(false);\r\n\r\n  const totalTime = props.totalTime ? props.totalTime : 3600000;\r\n  const [timerTime, setTimerTime] = useState<number>(0);\r\n  const [timerTimeTemp, setTimerTimeTemp] = useState<number>(3600000);\r\n\r\n  const sendNotification = (ms: number) => {\r\n    if (!supportNoti || timerTime === 0) {\r\n      return;\r\n    }\r\n    new Notification(`${convertRemainTime(remainTime)} Remain`);\r\n  }\r\n\r\n  const [remainTime, startStopwatch] = useStopwatch((ms) => {\r\n    sendNotification(ms);\r\n    console.log(`alarm: ${ms}`);\r\n  }, 100);\r\n\r\n  useEffect(() => {\r\n    startStopwatch(\r\n      timerTime,\r\n      range(0, 1, 1 / 12).map((v) => v * totalTime));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [timerTime]);\r\n\r\n  useEffect(() => {\r\n    if ('Notification' in window) {\r\n      Notification.requestPermission((permission) => {\r\n        if (permission === 'granted') {\r\n          setSupportNoti(true);\r\n        }\r\n      })\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const parseTimerTimeTempString = (value: string) => {\r\n    if (value.match(/^\\d\\d:\\d\\d$/g) === null)\r\n      return;\r\n\r\n    const min = parseInt(value.split(':')[0]);\r\n    const sec = parseInt(value.split(':')[1]);\r\n    const nextTimer = 1000 * (sec + 60 * min);\r\n    console.log('set timer temp : ' + nextTimer);\r\n    setTimerTimeTemp(nextTimer);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p> Sprint Timer</p>\r\n      <div className=\"circle-timer-clock\">\r\n        <svg className=\"circle-timer-svg\"\r\n          viewBox={`0 0 ${4 * unit} ${4 * unit}`}>\r\n          <Circle\r\n            percentage={100} />\r\n          <CircleTime />\r\n          <Circle\r\n            percentage={100 * remainTime / totalTime} />\r\n        </svg>\r\n      </div>\r\n      <p> {convertRemainTime(remainTime)} </p>\r\n      <div className=\"circle-timer-footer\">\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"timer-time-input\"> Time </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            placeholder=\"MM:SS\"\r\n            defaultValue=\"60:00\"\r\n            onChange={(value) => parseTimerTimeTempString(value.target.value)} />\r\n          <Button variant=\"success\" onClick={() => setTimerTime(timerTimeTemp)}> Start </Button>\r\n          <Button variant=\"danger\" onClick={() => setTimerTime(0)}> Stop </Button>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\n\r\ninterface TimerSettings {\r\n  endTime: number;\r\n  checkpoints: [number, number][];\r\n}\r\n\r\nexport function useTimer(callback: (ms: number) => void, tick: number = 100) {\r\n  const [resetCount, setResetCount] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let tickCount = 0;\r\n    const timer = setInterval(() => {\r\n      callback(tickCount * tick);\r\n      tickCount++;\r\n    }, tick);\r\n\r\n    return () => { clearInterval(timer) };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [resetCount]);\r\n\r\n  return [() => setResetCount(resetCount + 1)];\r\n}\r\n\r\nexport function useStopwatch(callback: (checkpoint: number) => void, tick: number = 100) {\r\n  const [settings, setSettings] = useState<TimerSettings>({\r\n    endTime: 0,\r\n    checkpoints: []\r\n  });\r\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\r\n  const [nextCheckpointIndex, setNextCheckpointIndex] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      let nextTime = Date.now();\r\n      if (nextTime > settings.endTime)\r\n        nextTime = settings.endTime;\r\n      \r\n      setCurrentTime(nextTime);\r\n    }, tick);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [settings, tick]);\r\n\r\n  useEffect(() => {\r\n    if (settings.checkpoints.length <= nextCheckpointIndex) {\r\n      return;\r\n    }\r\n\r\n    if (currentTime < settings.checkpoints[nextCheckpointIndex][1]) {\r\n      return;\r\n    }\r\n\r\n    callback(settings.checkpoints[nextCheckpointIndex][0]);\r\n    setNextCheckpointIndex(nextCheckpointIndex + 1);\r\n  }, [settings, currentTime, callback, nextCheckpointIndex]);\r\n\r\n  const startTimer = (ms: number, checkpoints: number[]) => {\r\n    const newStartTime = Date.now();\r\n\r\n    setSettings({\r\n      endTime: newStartTime + ms,\r\n      checkpoints: checkpoints\r\n        .sort((a, b) => a - b)\r\n        .map((v) => [v, newStartTime + v] as [number, number])\r\n    });\r\n    setNextCheckpointIndex(0);\r\n  }\r\n\r\n  return [settings.endTime - currentTime, startTimer] as [number, (ms: number, checkpoints: number[]) => void];\r\n}","import React from 'react';\nimport { CircleTimer } from './components/timers/circle-timer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <div className=\"App-content\">\n          <CircleTimer></CircleTimer>\n      </div>\n      <footer className=\"App-footer\">\n\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}