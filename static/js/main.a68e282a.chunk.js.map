{"version":3,"sources":["components/notification-context.tsx","components/time-selector.tsx","components/timers/circle-timer.tsx","hooks/useTimer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotificationContext","createContext","supportNotificatoin","sendNotification","message","NotificationContextProvider","props","useState","supportNoti","setSupportNoti","useEffect","window","Notification","requestPermission","permission","sendNoti","Provider","value","children","createMatcher","regex","callback","setTime","match","capTo","cap","matchers","min","parseInt","split","TimeSelector","maxTime","initTime","timeSelect","setTimeSelect","onMatch","ms","console","log","onTimeSelect","onTimeSelected","InputGroup","Prepend","Text","id","FormControl","placeholder","defaultValue","onChange","text","matcher","onTextChange","target","Button","variant","onClick","unit","range","begin","end","interval","result","current","push","convertRemainTime","milisec","Math","round","sec","floor","sec_str","slice","min_str","Circle","percentage","cx","cy","r","fill","strokeWidth","strokeDasharray","getLine","center","r1","r2","rotate","rad","PI","cos","sin","CircleTime","map","num","line","key","x1","y1","x2","y2","CircleHand","line1","line2","CircleClockImage","className","viewBox","CircleTimer","totalTime","alarmTimes","v","useContext","alarmEnabled","setAlarmEnabled","tick","endTime","checkpoints","settings","setSettings","Date","now","currentTime","setCurrentTime","nextCheckpointIndex","setNextCheckpointIndex","timer","setInterval","nextTime","clearInterval","length","startTimer","newStartTime","checkpointList","sort","a","b","checkpointIndex","findIndex","useStopwatch","remainTime","startStopwatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a68e282a.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext, FunctionComponent } from 'react';\r\n\r\n\r\nexport const NotificationContext = createContext({\r\n  supportNotificatoin: false,\r\n  sendNotification: (message: string): Notification | undefined => { return undefined; }\r\n})\r\nexport const NotificationContextProvider: FunctionComponent = (props) => {\r\n  const [supportNoti, setSupportNoti] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if ('Notification' in window) {\r\n      Notification.requestPermission((permission) => {\r\n        if (permission === 'granted') {\r\n          setSupportNoti(true);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const sendNoti = supportNoti ?\r\n    (message: string) => { return new Notification(message); } :\r\n    (message: string) => { return undefined; };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{\r\n      supportNotificatoin: supportNoti,\r\n      sendNotification: sendNoti\r\n    }}>\r\n      {props.children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\n\r\n","import React, { useState, FunctionComponent } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\n\r\nfunction createMatcher(regex: RegExp, callback: (value: string) => number) {\r\n  return (value: string, setTime: (ms: number) => void) => {\r\n    if (value.match(regex) === null)\r\n      return false;\r\n\r\n    const result = callback(value);\r\n    setTime(result);\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction capTo(value: number, cap: number): number {\r\n  return cap < value ? cap : value;\r\n}\r\n\r\nconst timeMatcher1 = createMatcher(/^\\d\\d:\\d\\d$/g, (value) => {\r\n  const min = capTo(parseInt(value.split(':')[0]), 59);\r\n  const sec = capTo(parseInt(value.split(':')[1]), 59);\r\n  const nextTimer = 1000 * (sec + 60 * min);\r\n\r\n  return nextTimer;\r\n});\r\n\r\nconst timeMatcher2 = createMatcher(/^\\d\\d.\\d\\d$/g, (value) => {\r\n  const min = capTo(parseInt(value.split('.')[0]), 59);\r\n  const sec = capTo(parseInt(value.split('.')[1]), 59);\r\n  const nextTimer = 1000 * (sec + 60 * min);\r\n\r\n  return nextTimer;\r\n});\r\n\r\nconst timeMatcher3 = createMatcher(/^\\d{1,2}$/g, (value) => {\r\n  const min = capTo(parseInt(value), 60);\r\n  const nextTimer = min === 60 ? 3599999 : 1000 * 60 * min;\r\n\r\n  return nextTimer;\r\n});\r\n\r\nconst matchers = [\r\n  timeMatcher1,\r\n  timeMatcher2,\r\n  timeMatcher3\r\n];\r\n\r\n\r\nexport const TimeSelector: FunctionComponent<{\r\n  initTime?: number,\r\n  onTimeSelected?: (ms: number) => void\r\n}> = (props) => {\r\n  const maxTime = 3599999;\r\n  const initTime = props.initTime ? props.initTime : maxTime;\r\n  const [timeSelect, setTimeSelect] = useState<number>(initTime);\r\n\r\n  const onMatch = (ms: number) => {\r\n    console.log(`time matched to : ${ms}`);\r\n    setTimeSelect(ms);\r\n  }\r\n\r\n  const onTextChange = (text: string) => {\r\n    for (const matcher of matchers) {\r\n      if (matcher(text, onMatch))\r\n        return;\r\n    }\r\n  }\r\n\r\n  const onTimeSelect = (ms: number) => {\r\n    if(!props.onTimeSelected) {\r\n      return;\r\n    }\r\n\r\n    ms = maxTime < ms ? maxTime : ms;\r\n    props.onTimeSelected(ms)\r\n  }\r\n\r\n  return (\r\n    <InputGroup>\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"timer-time-input\"> Time </InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl\r\n        placeholder=\"MM:SS\"\r\n        defaultValue=\"60:00\"\r\n        onChange={(value) => onTextChange(value.target.value)} />\r\n      <Button\r\n        variant=\"success\"\r\n        onClick={() => onTimeSelect(timeSelect)}>\r\n        Start\r\n      </Button>\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={() => onTimeSelect(0)}>\r\n        Stop\r\n      </Button>\r\n    </InputGroup>\r\n  )\r\n}","import React, { FunctionComponent, useContext, useState } from 'react';\r\nimport { NotificationContext } from '../notification-context';\r\nimport { TimeSelector } from '../time-selector';\r\nimport { useStopwatch } from '../../hooks/useTimer';\r\nimport './circle-timer.css'\r\n\r\nconst unit = 15.9155;\r\n\r\nfunction range(begin: number, end: number, interval: number) {\r\n  let result: number[] = [];\r\n\r\n  let current = begin;\r\n  while (current <= end) {\r\n    result.push(current);\r\n    current += interval;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction convertRemainTime(ms: number) {\r\n  if (ms < 0)\r\n    ms = 0;\r\n  const milisec = Math.round(ms / 1000) * 1000;\r\n  const sec = Math.floor((milisec / 1000) % 60);\r\n  const min = Math.floor((milisec / 60000));\r\n\r\n  const sec_str = (\"0\" + sec).slice(-2);\r\n  const min_str = min === 60 ? min : (\"0\" + min).slice(-2);\r\n\r\n  return `${min_str}:${sec_str}`\r\n}\r\n\r\nconst Circle: FunctionComponent<{\r\n  percentage: number\r\n}> = (props) => {\r\n  const percentage = props.percentage;\r\n  return (\r\n    <g>\r\n      <circle\r\n        cx={2 * unit}\r\n        cy={2 * unit}\r\n        r={unit}\r\n        fill={'none'}\r\n        strokeWidth={2 * unit}\r\n        strokeDasharray={`${percentage} 100`}\r\n      />\r\n    </g>\r\n  )\r\n}\r\nconst getLine = (center: number, r1: number, r2: number, rotate: number): [number, number][] => {\r\n  const rad = rotate / 180 * Math.PI;\r\n\r\n  return [\r\n    [center + r1 * Math.cos(rad), center + r1 * Math.sin(rad)],\r\n    [center + r2 * Math.cos(rad), center + r2 * Math.sin(rad)]\r\n  ];\r\n}\r\n\r\nconst CircleTime: FunctionComponent = (props) => {\r\n  const center = unit * 2;\r\n  const r1 = unit * 1.4;\r\n  const r2 = unit * 1.8;\r\n\r\n  return (\r\n    <g>\r\n      {\r\n        range(0, 11, 1).map((num) => {\r\n          const line = getLine(center, r1, r2, num * 30);\r\n\r\n          if (num % 3 === 0) {\r\n            return <line key={num}\r\n              x1={line[0][0]} y1={line[0][1]}\r\n              x2={line[1][0]} y2={line[1][1]}\r\n              strokeWidth={2} />\r\n          } else {\r\n            return <line key={num}\r\n              x1={line[0][0]} y1={line[0][1]}\r\n              x2={line[1][0]} y2={line[1][1]}\r\n              strokeWidth={1} />\r\n          }\r\n        })\r\n      }\r\n    </g>\r\n  )\r\n}\r\n\r\nconst CircleHand: FunctionComponent<{\r\n  percentage: number\r\n}> = (props) => {\r\n  const center = unit * 2;\r\n  const r1 = unit * 0.2;\r\n  const r2 = unit * 2;\r\n\r\n  const line1 = getLine(center, r1, r2, 3.6 * props.percentage);\r\n  const line2 = getLine(center, r1, r2, 0);\r\n\r\n  return (\r\n    <g>\r\n      <circle\r\n        cx={2 * unit}\r\n        cy={2 * unit}\r\n        r={r1} />\r\n      <line\r\n        x1={line1[0][0]} y1={line1[0][1]}\r\n        x2={line1[1][0]} y2={line1[1][1]}\r\n        strokeWidth={1} />\r\n      <line\r\n        x1={line2[0][0]} y1={line2[0][1]}\r\n        x2={line2[1][0]} y2={line2[1][1]}\r\n        strokeWidth={1} />\r\n    </g>\r\n  )\r\n}\r\n\r\nconst CircleClockImage: FunctionComponent<{\r\n  percentage: number;\r\n}> = (props) => {\r\n  return (\r\n    <svg className=\"circle-timer-svg\"\r\n      viewBox={`0 0 ${4 * unit} ${4 * unit}`}>\r\n      <Circle\r\n        percentage={100} />\r\n      <CircleTime />\r\n      <Circle\r\n        percentage={100 * props.percentage} />\r\n      <CircleHand\r\n        percentage={100 * props.percentage} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport const CircleTimer: FunctionComponent<{\r\n  totalTime?: number\r\n}> = (props) => {\r\n  const totalTime = props.totalTime ? props.totalTime : 3600000;\r\n  const alarmTimes = range(0, 1, 1 / 12).map((v) => v * totalTime);\r\n\r\n  const { sendNotification } = useContext(NotificationContext);\r\n  const [alarmEnabled, setAlarmEnabled] = useState<boolean>(false);\r\n  const [remainTime, startStopwatch] = useStopwatch((ms) => {\r\n    if (!alarmEnabled) {\r\n      return;\r\n    }\r\n\r\n    console.log(`alarm: ${ms}`);\r\n    sendNotification(`${convertRemainTime(ms)} Remain`);\r\n\r\n    if (ms === 0)\r\n      setAlarmEnabled(false);\r\n  }, 100);\r\n\r\n  return (\r\n    <div>\r\n      <p> Sprint Timer</p>\r\n      <div className=\"circle-timer-clock\">\r\n        <CircleClockImage percentage={remainTime / totalTime} />\r\n      </div>\r\n      <p> {convertRemainTime(remainTime)} </p>\r\n      <div className=\"circle-timer-footer\">\r\n        <TimeSelector\r\n          initTime={totalTime}\r\n          onTimeSelected={(ms) => {\r\n            setAlarmEnabled(ms !== 0);\r\n            console.log(`start stopwatch: ${ms}`);\r\n            startStopwatch(ms, alarmTimes);\r\n          }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import { useState, useEffect } from 'react';\n\ninterface TimerSettings {\n  endTime: number;\n  checkpoints: [number, number][];\n}\n\nexport function useStopwatch(callback: (checkpoint: number) => void, tick: number = 100) {\n  const [settings, setSettings] = useState<TimerSettings>({\n    endTime: 0,\n    checkpoints: []\n  });\n  const [currentTime, setCurrentTime] = useState<number>(Date.now());\n  const [nextCheckpointIndex, setNextCheckpointIndex] = useState<number>(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      let nextTime = Date.now();\n      if (nextTime > settings.endTime)\n        nextTime = settings.endTime;\n\n      setCurrentTime(nextTime);\n    }, tick);\n\n    return () => {\n      console.log('relase interval');\n      clearInterval(timer);\n    }\n  }, [settings, tick]);\n\n  useEffect(() => {\n    if (settings.checkpoints.length <= nextCheckpointIndex) {\n      return;\n    }\n    if (currentTime < settings.checkpoints[nextCheckpointIndex][1]) {\n      return;\n    }\n\n\n    callback(settings.endTime - currentTime);\n    setNextCheckpointIndex(nextCheckpointIndex + 1);\n  }, [settings, currentTime, callback, nextCheckpointIndex]);\n\n  const startTimer = (ms: number, checkpoints: number[]) => {\n    const newStartTime = Date.now();\n    const endTime = newStartTime + ms;\n    const checkpointList = checkpoints\n      .sort((a, b) => b - a)\n      .map((v) => [v, endTime - v] as [number, number])\n    const checkpointIndex = checkpointList.findIndex((v) => newStartTime <= v[1]);\n\n    setSettings({\n      endTime: endTime,\n      checkpoints: checkpointList\n    });\n    setNextCheckpointIndex(checkpointIndex === -1 ? 0 : checkpointIndex);\n  }\n\n  return [settings.endTime - currentTime, startTimer] as [number, (ms: number, checkpoints: number[]) => void];\n}","import React from 'react';\nimport { CircleTimer } from './components/timers/circle-timer';\nimport { NotificationContextProvider } from './components/notification-context';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n      </header>\n      <div className=\"App-content\">\n        <NotificationContextProvider>\n          <CircleTimer />\n        </NotificationContextProvider>\n      </div>\n      <footer className=\"App-footer\">\n\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}